{"version":3,"sources":["scripts/main.js"],"names":["GRID_SIZE","Tile","gridElement","tileElement","document","createElement","classList","add","setValue","Math","random","append","x","y","style","setProperty","value","textContent","remove","Cell","cell","tile","setXY","linkedTile","linkedTileForMerge","newTile","isEmpty","hasTileForMerge","removeFromField","unlinkTileForMerge","getValue","Grid","cells","i","push","floor","cellsGrouppedByColumns","groupCellsByColumn","cellsGrouppedByReversedColumns","map","column","reverse","cellsGrouppedByRows","groupCellsByRow","cellsGrouppedByReversedRows","row","emptyCells","filter","length","reduce","groupedCells","gameBoard","getElementById","grid","startButton","addEventListener","startGame","score","scoreElement","setupNewGame","innerHTML","removeEventListener","forEach","unlinkTile","getRandomEmptyCell","linkTile","setupInputOnce","window","handleInput","once","e","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","slideTiles","group","slideTilesInGroup","mergeTiles","j","cellWithTile","targetCell","canAccept","linkTileForMerge","canMove","groupCells","some","canMoveInGroup","index"],"mappings":"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","file":"main.34412524.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst GRID_SIZE = 4;\n\nclass Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n\n    this.tileElement.classList.add(`tile--${value}`);\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  removeFromField() {\n    this.tileElement.remove();\n  }\n}\n\nclass Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty()\n      || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    this.linkedTile\n      .setValue(this.linkedTile.value + this.linkedTileForMerge.value);\n\n    this.linkedTileForMerge.removeFromField();\n    this.unlinkTileForMerge();\n  }\n\n  getValue() {\n    return this.linkedTile.getValue();\n  }\n}\n\nclass Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\n      );\n    }\n\n    this.cellsGrouppedByColumns = this.groupCellsByColumn();\n\n    this.cellsGrouppedByReversedColumns = this.groupCellsByColumn()\n      .map(column => [...column].reverse());\n\n    this.cellsGrouppedByRows = this.groupCellsByRow();\n\n    this.cellsGrouppedByReversedRows = this.groupCellsByRow()\n      .map(row => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n\nconst gameBoard = document.getElementById('game-field');\nconst grid = new Grid(gameBoard);\n\nconst startButton = document.getElementById('button-start');\n\nstartButton.addEventListener('click', startGame);\n\nlet score = 0;\nconst scoreElement = document.getElementById('score');\n\nfunction startGame() {\n  setupNewGame();\n\n  document.getElementById('message-start').classList.add('hidden');\n\n  startButton.classList.remove('start');\n  startButton.innerHTML = 'Restart';\n  startButton.classList.add('restart');\n\n  startButton.removeEventListener('click', startGame);\n  startButton.addEventListener('click', setupNewGame);\n}\n\nfunction setupNewGame() {\n  grid.cells.forEach(cell => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeFromField();\n      cell.unlinkTile();\n    }\n  });\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  setupInputOnce();\n\n  score = 0;\n  scoreElement.innerHTML = score;\n\n  document.getElementById('message-lose').classList.add('hidden');\n  document.getElementById('message-win').classList.add('hidden');\n}\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n      moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    document.getElementById('message-lose').classList.remove('hidden');\n\n    return;\n  }\n\n  setupInputOnce();\n}\n\nfunction moveUp() {\n  slideTiles(grid.cellsGrouppedByColumns);\n}\n\nfunction moveDown() {\n  slideTiles(grid.cellsGrouppedByReversedColumns);\n}\n\nfunction moveLeft() {\n  slideTiles(grid.cellsGrouppedByRows);\n}\n\nfunction moveRight() {\n  slideTiles(grid.cellsGrouppedByReversedRows);\n}\n\nfunction slideTiles(groupedCells) {\n  groupedCells.forEach(group => slideTilesInGroup(group));\n\n  grid.cells.forEach(cell => {\n    if (cell.hasTileForMerge()) {\n      cell.mergeTiles();\n      score += cell.getValue();\n      scoreElement.innerHTML = score;\n\n      if (cell.getValue() === 2048) {\n        document.getElementById('message-win').classList.remove('hidden');\n        window.removeEventListener('keydown');\n      }\n    }\n  });\n}\n\nfunction slideTilesInGroup(group) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGrouppedByColumns);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGrouppedByReversedColumns);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGrouppedByRows);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGrouppedByReversedRows);\n}\n\nfunction canMove(groupCells) {\n  return groupCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n"]}